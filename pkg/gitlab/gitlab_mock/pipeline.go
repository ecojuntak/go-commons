// Code generated by mockery 2.9.0. DO NOT EDIT.

package gitlab_mock

import (
	gitlab "github.com/gopaytech/go-commons/pkg/gitlab"
	go_gitlab "github.com/xanzy/go-gitlab"

	mock "github.com/stretchr/testify/mock"
)

// Pipeline is an autogenerated mock type for the Pipeline type
type Pipeline struct {
	mock.Mock
}

// GetBySHA provides a mock function with given fields: id, sha
func (_m *Pipeline) GetBySHA(id gitlab.NameOrId, sha string) ([]go_gitlab.PipelineInfo, error) {
	ret := _m.Called(id, sha)

	var r0 []go_gitlab.PipelineInfo
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, string) []go_gitlab.PipelineInfo); ok {
		r0 = rf(id, sha)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]go_gitlab.PipelineInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gitlab.NameOrId, string) error); ok {
		r1 = rf(id, sha)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySHAAndRef provides a mock function with given fields: id, sha, ref
func (_m *Pipeline) GetBySHAAndRef(id gitlab.NameOrId, sha string, ref string) ([]go_gitlab.PipelineInfo, error) {
	ret := _m.Called(id, sha, ref)

	var r0 []go_gitlab.PipelineInfo
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, string, string) []go_gitlab.PipelineInfo); ok {
		r0 = rf(id, sha, ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]go_gitlab.PipelineInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gitlab.NameOrId, string, string) error); ok {
		r1 = rf(id, sha, ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySHAOnDefault provides a mock function with given fields: id, sha
func (_m *Pipeline) GetBySHAOnDefault(id gitlab.NameOrId, sha string) ([]go_gitlab.PipelineInfo, error) {
	ret := _m.Called(id, sha)

	var r0 []go_gitlab.PipelineInfo
	if rf, ok := ret.Get(0).(func(gitlab.NameOrId, string) []go_gitlab.PipelineInfo); ok {
		r0 = rf(id, sha)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]go_gitlab.PipelineInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gitlab.NameOrId, string) error); ok {
		r1 = rf(id, sha)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
