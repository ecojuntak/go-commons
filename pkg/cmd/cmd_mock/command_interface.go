// Code generated by mockery 2.9.4. DO NOT EDIT.

package cmd_mock

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// CommandInterface is an autogenerated mock type for the CommandInterface type
type CommandInterface struct {
	mock.Mock
}

// Exec provides a mock function with given fields: command, arg
func (_m *CommandInterface) Exec(command string, arg ...string) (io.ReadCloser, io.ReadCloser, error) {
	_va := make([]interface{}, len(arg))
	for _i := range arg {
		_va[_i] = arg[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(string, ...string) io.ReadCloser); ok {
		r0 = rf(command, arg...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 io.ReadCloser
	if rf, ok := ret.Get(1).(func(string, ...string) io.ReadCloser); ok {
		r1 = rf(command, arg...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.ReadCloser)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, ...string) error); ok {
		r2 = rf(command, arg...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExecAndWait provides a mock function with given fields: command, arg
func (_m *CommandInterface) ExecAndWait(command string, arg ...string) (string, error) {
	_va := make([]interface{}, len(arg))
	for _i := range arg {
		_va[_i] = arg[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...string) string); ok {
		r0 = rf(command, arg...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(command, arg...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Execute provides a mock function with given fields: env, dir, command, arg
func (_m *CommandInterface) Execute(env map[string]string, dir string, command string, arg ...string) (io.ReadCloser, io.ReadCloser, error) {
	_va := make([]interface{}, len(arg))
	for _i := range arg {
		_va[_i] = arg[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, env, dir, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(map[string]string, string, string, ...string) io.ReadCloser); ok {
		r0 = rf(env, dir, command, arg...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 io.ReadCloser
	if rf, ok := ret.Get(1).(func(map[string]string, string, string, ...string) io.ReadCloser); ok {
		r1 = rf(env, dir, command, arg...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.ReadCloser)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(map[string]string, string, string, ...string) error); ok {
		r2 = rf(env, dir, command, arg...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExecuteAndWait provides a mock function with given fields: env, dir, command, arg
func (_m *CommandInterface) ExecuteAndWait(env map[string]string, dir string, command string, arg ...string) (string, error) {
	_va := make([]interface{}, len(arg))
	for _i := range arg {
		_va[_i] = arg[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, env, dir, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(map[string]string, string, string, ...string) string); ok {
		r0 = rf(env, dir, command, arg...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]string, string, string, ...string) error); ok {
		r1 = rf(env, dir, command, arg...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
