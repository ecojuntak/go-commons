// Code generated by mockery 2.9.0. DO NOT EDIT.

package docker_mock

import (
	io "io"

	docker "github.com/gopaytech/go-commons/pkg/docker"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Build provides a mock function with given fields: tar, dockerFileName, imageName, imageTags, arguments
func (_m *Client) Build(tar io.Reader, dockerFileName string, imageName string, imageTags []string, arguments map[string]string) (chan *docker.BuildResponse, error) {
	ret := _m.Called(tar, dockerFileName, imageName, imageTags, arguments)

	var r0 chan *docker.BuildResponse
	if rf, ok := ret.Get(0).(func(io.Reader, string, string, []string, map[string]string) chan *docker.BuildResponse); ok {
		r0 = rf(tar, dockerFileName, imageName, imageTags, arguments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *docker.BuildResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader, string, string, []string, map[string]string) error); ok {
		r1 = rf(tar, dockerFileName, imageName, imageTags, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Push provides a mock function with given fields: imageName, imageTags
func (_m *Client) Push(imageName string, imageTags []string) (chan *docker.PushResponse, chan error) {
	ret := _m.Called(imageName, imageTags)

	var r0 chan *docker.PushResponse
	if rf, ok := ret.Get(0).(func(string, []string) chan *docker.PushResponse); ok {
		r0 = rf(imageName, imageTags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *docker.PushResponse)
		}
	}

	var r1 chan error
	if rf, ok := ret.Get(1).(func(string, []string) chan error); ok {
		r1 = rf(imageName, imageTags)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan error)
		}
	}

	return r0, r1
}
