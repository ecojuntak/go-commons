// Code generated by mockery 2.9.0. DO NOT EDIT.

package k8s_mock

import (
	context "context"
	io "io"

	k8s "github.com/gopaytech/go-commons/pkg/k8s"
	mock "github.com/stretchr/testify/mock"

	time "time"

	v1 "k8s.io/api/core/v1"
)

// Job is an autogenerated mock type for the Job type
type Job struct {
	mock.Mock
}

// ExecuteJob provides a mock function with given fields: ctx, config, imageName, args
func (_m *Job) ExecuteJob(ctx context.Context, config *k8s.JobConfig, imageName string, args map[string]string) (string, error) {
	ret := _m.Called(ctx, config, imageName, args)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *k8s.JobConfig, string, map[string]string) string); ok {
		r0 = rf(ctx, config, imageName, args)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *k8s.JobConfig, string, map[string]string) error); ok {
		r1 = rf(ctx, config, imageName, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteJobWithCommand provides a mock function with given fields: ctx, config, imageName, args, commands
func (_m *Job) ExecuteJobWithCommand(ctx context.Context, config *k8s.JobConfig, imageName string, args map[string]string, commands []string) (string, error) {
	ret := _m.Called(ctx, config, imageName, args, commands)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *k8s.JobConfig, string, map[string]string, []string) string); ok {
		r0 = rf(ctx, config, imageName, args, commands)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *k8s.JobConfig, string, map[string]string, []string) error); ok {
		r1 = rf(ctx, config, imageName, args, commands)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPodLogs provides a mock function with given fields: ctx, pod
func (_m *Job) GetPodLogs(ctx context.Context, pod *v1.Pod) (io.ReadCloser, error) {
	ret := _m.Called(ctx, pod)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Pod) io.ReadCloser); ok {
		r0 = rf(ctx, pod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.Pod) error); ok {
		r1 = rf(ctx, pod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JobExecutionStatus provides a mock function with given fields: ctx, config, executionName
func (_m *Job) JobExecutionStatus(ctx context.Context, config *k8s.JobConfig, executionName string) (k8s.JobStatus, error) {
	ret := _m.Called(ctx, config, executionName)

	var r0 k8s.JobStatus
	if rf, ok := ret.Get(0).(func(context.Context, *k8s.JobConfig, string) k8s.JobStatus); ok {
		r0 = rf(ctx, config, executionName)
	} else {
		r0 = ret.Get(0).(k8s.JobStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *k8s.JobConfig, string) error); ok {
		r1 = rf(ctx, config, executionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitForReadyJob provides a mock function with given fields: ctx, config, executionName, waitTime
func (_m *Job) WaitForReadyJob(ctx context.Context, config *k8s.JobConfig, executionName string, waitTime time.Duration) error {
	ret := _m.Called(ctx, config, executionName, waitTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *k8s.JobConfig, string, time.Duration) error); ok {
		r0 = rf(ctx, config, executionName, waitTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitForReadyPod provides a mock function with given fields: ctx, config, executionName, waitTime
func (_m *Job) WaitForReadyPod(ctx context.Context, config *k8s.JobConfig, executionName string, waitTime time.Duration) (*v1.Pod, error) {
	ret := _m.Called(ctx, config, executionName, waitTime)

	var r0 *v1.Pod
	if rf, ok := ret.Get(0).(func(context.Context, *k8s.JobConfig, string, time.Duration) *v1.Pod); ok {
		r0 = rf(ctx, config, executionName, waitTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *k8s.JobConfig, string, time.Duration) error); ok {
		r1 = rf(ctx, config, executionName, waitTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
